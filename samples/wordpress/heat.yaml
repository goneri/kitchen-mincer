heat_template_version: 2013-05-23

description: >
  Based on Heat Wordpress example

parameters:
  key_name:
    type: string
    description : Name of a key pair to enable SSH access to instances.
    default: default
  flavor:
    type: string
    description: Flavor to use for the WordPress server.
    constraints:
      - custom_constraint: nova.flavor
  db_name:
    type: string
    description: WordPress database name
    default: wordpress
    constraints:
      - length: { min: 1, max: 64 }
        description: db_name must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_name must begin with a letter and contain only alphanumeric
          characters
  db_username:
    type: string
    description: The WordPress database admin account username
    default: admin
    hidden: true
    constraints:
      - length: { min: 1, max: 16 }
        description: db_username must be between 1 and 64 characters
      - allowed_pattern: '[a-zA-Z][a-zA-Z0-9]*'
        description: >
          db_username must begin with a letter and contain only alphanumeric
          characters
  volume_id_ubuntu-13.10-server-amd64.iso:
    type: string
    description: Ubuntu 13.10 server ISO
  volume_id_wordpress_files:
    type: string
    description: Wordpress file
  volume_id_dump_mysql:
    type: string
    description: Backup to restore
  volume_id_base_image:
    type: string
    description: The VM root system
  floating_ip_public_wordpress_ip:
    type: string
    description: Public IP

resources:
  volume_ubuntu_dvd:
    type: OS::Cinder::Volume
    properties:
      image: { get_param: volume_id_ubuntu-13.10-server-amd64.iso }
      size: 5
  attach_volume_ubuntu_dvd:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: ubuntu_mirror_instance }
      volume_id: { get_resource: volume_ubuntu_dvd }

  volume_mysql_data:
    type: OS::Cinder::Volume
    properties:
      image: { get_param: volume_id_dump_mysql }
      size: 5
  attach_volume_mysql_data:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: dbserver_instance }
      volume_id: { get_resource: volume_mysql_data }

  volume_wordpress_files:
    type: OS::Cinder::Volume
    properties:
      image: { get_param: volume_id_wordpress_files }
      size: 5
  attach_volume_wordpress_files:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: webserver_instance }
      volume_id: { get_resource: volume_wordpress_files }


  ubuntu_mirror_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config: { get_file: apt_mirror_config.sh }

  wordpress_config:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: ubuntu_mirror
        - name: db_name
        - name: db_user
        - name: db_password
        - name: db_ipaddr
      group: script
      config: { get_file: wp_install.sh }

  db_config:
    type: OS::Heat::SoftwareConfig
    properties:
      inputs:
        - name: ubuntu_mirror
        - name: db_rootpassword
        - name: db_name
        - name: db_user
        - name: db_password
      group: script
      config: { get_file: db_install.sh }

  db_root_password:
    type: OS::Heat::RandomString

  db_password:
    type: OS::Heat::RandomString

  wordpress_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: db_deployment
    properties:
      config:
        get_resource: wordpress_config
      server:
        get_resource: webserver_instance
      input_values:
        ubuntu_mirror: { get_attr: [ ubuntu_mirror_instance, networks, private, 0 ] }
        db_name: { get_param: db_name }
        db_user: { get_param: db_username }
        db_password: { get_attr: [ db_password, value ] }
        db_ipaddr: { get_attr: [ dbserver_instance, networks, private, 0 ] }

  db_deployment:
    type: OS::Heat::SoftwareDeployment
    depends_on: ubuntu_mirror_deployment
    properties:
      config:
        get_resource: db_config
      server:
        get_resource: dbserver_instance
      input_values:
        ubuntu_mirror: { get_attr: [ ubuntu_mirror_instance, networks, private, 0 ] }
        db_rootpassword: { get_attr: [ db_root_password, value ] }
        db_name: { get_param: db_name }
        db_user: { get_param: db_username }
        db_password: { get_attr: [ db_password, value ] }

  ubuntu_mirror_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: ubuntu_mirror_config
      server:
        get_resource: ubuntu_mirror_instance

  ubuntu_mirror_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: volume_id_base_image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      user_data_format: SOFTWARE_CONFIG

  webserver_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: volume_id_base_image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      user_data_format: SOFTWARE_CONFIG

  dbserver_instance:
    type: OS::Nova::Server
    properties:
      image: { get_param: volume_id_base_image }
      flavor: { get_param: flavor }
      key_name: { get_param: key_name }
      user_data_format: SOFTWARE_CONFIG

  wordpress_floating_ip:
    type: OS::Nova::FloatingIPAssociation
    properties:
      server_id: { get_resource: webserver_instance }
      floating_ip: { get_param: floating_ip_public_wordpress_ip }

outputs:
  WebsiteURL:
    description: URL for Wordpress wiki
    value:
      str_replace:
        template: http://host/wordpress
        params:
          host: { get_attr: [webserver_instance, networks, private, 0] }
  stdout_ubuntu_mirror_deployment:
    value:
      get_attr: [ubuntu_mirror_deployment, deploy_stdout]
  stdout_wordpress_deployment:
    value:
      get_attr: [wordpress_deployment, deploy_stdout]
  stdout_db_deployment:
    value:
      get_attr: [db_deployment, deploy_stdout]
  stderr_ubuntu_mirror_deployment:
    value:
      get_attr: [ubuntu_mirror_deployment, deploy_stderr]
  stderr_wordpress_deployment:
    value:
      get_attr: [wordpress_deployment, deploy_stderr]
  stderr_db_deployment:
    value:
      get_attr: [db_deployment, deploy_stderr]